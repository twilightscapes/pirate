---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import FormattedDate from "../FormattedDate.astro";
import YouTubeEmbed from '../YouTubeEmbed.astro';

interface Props {
    content: CollectionEntry<"post">;
    youtube?: string;
}

const {
    content: { data },
    youtube,
} = Astro.props;

const dateTimeOptions: Intl.DateTimeFormatOptions = {
    month: "long",
};
---
{youtube ? (

        <YouTubeEmbed 
        title={data.youtube.title}
    url={data.youtube.url}
    controls={data.youtube.controls}
    mute={data.youtube.mute}
    loop={data.youtube.loop}
    start={data.youtube.start}
    end={data.youtube.end}
/>

) : data.coverImage && data.coverImage.src ? (
    <div class="aspect-h-9 aspect-w-16 mb-6">
        <Image
            alt={data.coverImage.alt || ""}
            class="object-contain"
            fetchpriority="high"
            loading="eager"
            src={data.coverImage.src}
            width={800}
            height={450}
        />
    </div>
) : null}




<div class="container">
    {data.draft ? <span class="text-base text-red-500">(Draft)</span> : null}
    <h1 class="title mb-3 sm:mb-1" style="padding-left:5%;">
        {data.title}
    </h1>
    <div class="flex flex-wrap items-center gap-x-3 gap-y-2">
        <p class="font-semibold">
            <FormattedDate date={data.publishDate} dateTimeOptions={dateTimeOptions} />
        </p>
        {data.updatedDate && (
            <span class="rounded-lg bg-quote/10 p-1 text-quote">
                Last Updated:{" "}
                <FormattedDate
                    date={data.updatedDate}
                    dateTimeOptions={dateTimeOptions}
                />
            </span>
        )}
    </div>
    {data.tags && data.tags.length > 0 && (
        <div class="mt-3">
            <svg
                aria-hidden="true"
                class="inline-block h-6 w-6"
                fill="none"
                focusable="false"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="1.5"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path d="M0 0h24v24H0z" fill="none" stroke="none" />
                <path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
                <path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
                <path d="M6 9h-.01" />
            </svg>
            {data.tags.map((tag, i) => (
                <>
                    <a
                        aria-label={`View more blogs with the tag ${tag}`}
                        class="cactus-link inline-block before:content-['#']"
                        data-pagefind-filter="tag"
                        href={`/tags/${tag}/`}
                    >
                        {tag}
                    </a>
                    {i < data.tags.length - 1 && ", "}
                </>
            ))}
        </div>
    )}
</div>

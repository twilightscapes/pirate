---
import { getEntry } from 'astro:content';
const styleAppearance = await getEntry('styleapps', 'index');
---
<script define:vars={{ styleAppearance }}>
function applyTheme() {
  const root = document.documentElement;
  const isDarkMode = root.classList.contains('dark');

  // Light theme
  root.style.setProperty('--theme-bg-light', styleAppearance.data.lightBg);
  root.style.setProperty('--theme-link-light', styleAppearance.data.lightLink);
  root.style.setProperty('--theme-text-light', styleAppearance.data.lightText);
  root.style.setProperty('--theme-accent-light', styleAppearance.data.lightAccent);
  root.style.setProperty('--theme-accent2-light', styleAppearance.data.lightAccent2);
  root.style.setProperty('--theme-header-light', styleAppearance.data.lightHeader);

  // Dark theme
  root.style.setProperty('--theme-bg-dark', styleAppearance.data.darkBg);
  root.style.setProperty('--theme-link-dark', styleAppearance.data.darkLink);
  root.style.setProperty('--theme-text-dark', styleAppearance.data.darkText);
  root.style.setProperty('--theme-accent-dark', styleAppearance.data.darkAccent);
  root.style.setProperty('--theme-accent2-dark', styleAppearance.data.darkAccent2);
  root.style.setProperty('--theme-header-dark', styleAppearance.data.darkHeader);

  // Update current theme
  updateCurrentTheme(isDarkMode);
}

function updateCurrentTheme(isDarkMode) {
  const root = document.documentElement;
  root.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');
}

document.addEventListener('DOMContentLoaded', () => {
  applyTheme();
});

document.addEventListener('astro:page-load', applyTheme);

// Listen for theme changes
const observer = new MutationObserver((mutations) => {
  mutations.forEach((mutation) => {
    if (mutation.attributeName === 'class') {
      const isDarkMode = document.documentElement.classList.contains('dark');
      updateCurrentTheme(isDarkMode);
    }
  });
});

observer.observe(document.documentElement, { attributes: true });
</script>
